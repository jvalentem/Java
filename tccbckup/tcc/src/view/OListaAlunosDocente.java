/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
import dao.AlunoDAO;
import dao.PedagogiaDAO;
import model.Aluno;
import java.awt.Component;
import java.util.ArrayList;
import model.Pedagogia;
import backend.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author thayn
 */
public class OListaAlunosDocente extends javax.swing.JDialog {

    /**
     * Creates new form oListaAlunos
     */
    public OListaAlunosDocente() {
        initComponents();
        setResizable(false);
        setLocationRelativeTo(null);
        try{
            setListaAluno();
        }catch(Exception e){}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel_listaAlunos = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        input_pesquisa = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnVoltar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        statusMessage = new javax.swing.JLabel();
        pesquisa_id = new javax.swing.JTextField();
        pesquisa_idAluno = new javax.swing.JTextField();
        label3 = new java.awt.Label();
        btnPesquisar_alunoId = new javax.swing.JButton();
        botaoAlternar = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabela_alunos = new javax.swing.JTable();
        btn_seeObs = new javax.swing.JButton();
        btn_addObs = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        panel_listaAlunos.setBackground(new java.awt.Color(255, 255, 255));
        panel_listaAlunos.setMaximumSize(new java.awt.Dimension(1079, 773));

        jPanel2.setBackground(new java.awt.Color(50, 50, 108));

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("Lista de Alunos (DOCENTE)");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        label1.getAccessibleContext().setAccessibleName("lblLista");

        label2.setText("Código da Turma ");

        jLabel1.setText("Pesquisa por nome");

        btnVoltar.setText("Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        statusMessage.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        statusMessage.setForeground(new java.awt.Color(255, 0, 0));

        pesquisa_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisa_idActionPerformed(evt);
            }
        });

        pesquisa_idAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisa_idAlunoActionPerformed(evt);
            }
        });
        pesquisa_idAluno.setVisible(false);

        label3.setText("Pesquisar por ID do aluno");
        label3.setVisible(false);

        btnPesquisar_alunoId.setText("Pesquisar");
        btnPesquisar_alunoId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisar_alunoIdActionPerformed(evt);
            }
        });
        btnPesquisar_alunoId.setVisible(false);

        botaoAlternar.setText("Buscar por ID");
        botaoAlternar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoAlternarActionPerformed(evt);
            }
        });

        tabela_alunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "CURSO", "TURMA", "NECESSIDADE"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela_alunos.setEnabled(false);
        tabela_alunos.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tabela_alunos);
        if (tabela_alunos.getColumnModel().getColumnCount() > 0) {
            tabela_alunos.getColumnModel().getColumn(0).setResizable(false);
            tabela_alunos.getColumnModel().getColumn(1).setResizable(false);
            tabela_alunos.getColumnModel().getColumn(2).setResizable(false);
            tabela_alunos.getColumnModel().getColumn(3).setResizable(false);
            tabela_alunos.getColumnModel().getColumn(4).setResizable(false);
        }

        btn_seeObs.setText("Consultar observações");
        btn_seeObs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_seeObsActionPerformed(evt);
            }
        });

        btn_addObs.setText("Adicionar Observação");
        btn_addObs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addObsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_listaAlunosLayout = new javax.swing.GroupLayout(panel_listaAlunos);
        panel_listaAlunos.setLayout(panel_listaAlunosLayout);
        panel_listaAlunosLayout.setHorizontalGroup(
            panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6)
                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                        .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_listaAlunosLayout.createSequentialGroup()
                                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                        .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(statusMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
                                            .addComponent(btnPesquisar))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_addObs))
                                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                        .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(pesquisa_id, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(botaoAlternar)
                                        .addGap(69, 69, 69)
                                        .addComponent(btnLimpar)))
                                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                        .addGap(65, 65, 65)
                                        .addComponent(btnVoltar))
                                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn_seeObs))))
                            .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                                        .addComponent(pesquisa_idAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnPesquisar_alunoId))
                                    .addComponent(jLabel1)
                                    .addComponent(input_pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        panel_listaAlunosLayout.setVerticalGroup(
            panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pesquisa_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(19, 19, 19)
                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(botaoAlternar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(1, 1, 1)
                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pesquisa_idAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar_alunoId))
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel_listaAlunosLayout.createSequentialGroup()
                        .addComponent(input_pesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel_listaAlunosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_addObs)
                        .addComponent(btn_seeObs)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.getAccessibleContext().setAccessibleName("panel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_listaAlunos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel_listaAlunos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
        new TelaLoginProfessor().setVisible(true);
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        try {
            //reinicia a lista de alunos e os inputs
            setListaAluno();
            input_pesquisa.setText("");
            pesquisa_id.setText("");
            pesquisa_idAluno.setText("");
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        try {
            String inputIdTurma = pesquisa_id.getText();
            String inputNome = input_pesquisa.getText();
            
            
            if(inputIdTurma.isEmpty()){
                if(inputNome.isEmpty()){
                    setListaAluno(); //se ambos os inputs estiverem vazios, vai retornar uma lista global de todos os alunos (independente de turma ou nome)
                    return;
                }
                setListaAlunosPorNome(); //se só o input de nome estiver vazio, o programa vai buscar com o codigo da turma
                return;
            }
            if(inputNome.isEmpty()){
                setListaAlunosPorTurma(); // se so o input de nome estiver vazio, o programa busca por turma
                return;
            }
            setListaAlunosPorTurmaeNome(); //se ambos não estiverem vazios, o programa vai buscar de acordo com a turma e o nome
            
        } catch (Exception e) {
            statusMessage.setText("Algo deu errado");
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void pesquisa_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisa_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pesquisa_idActionPerformed

    private void pesquisa_idAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisa_idAlunoActionPerformed

        
    }//GEN-LAST:event_pesquisa_idAlunoActionPerformed

    private void btnPesquisar_alunoIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisar_alunoIdActionPerformed
        setListaAlunosPorId();
      
    }//GEN-LAST:event_btnPesquisar_alunoIdActionPerformed

    private void botaoAlternarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoAlternarActionPerformed
       alternar();
    }//GEN-LAST:event_botaoAlternarActionPerformed

    private void btn_seeObsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_seeObsActionPerformed
        new SelecaoObservacoes().setVisible(true);
    }//GEN-LAST:event_btn_seeObsActionPerformed

    private void btn_addObsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addObsActionPerformed
        new AdicionarObservacao().setVisible(true);
    }//GEN-LAST:event_btn_addObsActionPerformed
    private void alternar(){ 
        //metodo alterna o tipo de input, de turma + nome passa para busca por id
        boolean modoID = botaoAlternar.getText().equals("Buscar por ID");
        
        try{
        setListaAluno();
        if(modoID){
            System.out.println("modo id");
            label3.setVisible(true);
            pesquisa_idAluno.setVisible(true);
            btnPesquisar_alunoId.setVisible(true);
            jLabel1.setVisible(false);
            input_pesquisa.setVisible(false);
            btnPesquisar.setVisible(false);
            pesquisa_id.setVisible(false);
            label2.setVisible(false);
            botaoAlternar.setText("Busca generalizada");
        
            return;
        }
        
        label3.setVisible(false);
        pesquisa_idAluno.setVisible(false);
        btnPesquisar_alunoId.setVisible(false);
        jLabel1.setVisible(true);
        input_pesquisa.setVisible(true);
        btnPesquisar.setVisible(true);
        pesquisa_id.setVisible(true);
        label2.setVisible(true);
        botaoAlternar.setText("Buscar por ID");
        
        
        }catch(Exception e){
            statusMessage.setText("Algo deu errado");
        }
    }
   
    
    private void setListaAlunosPorId(){
        //muda a lista de alunos de acordo com o id (retorna apenas 1 aluno)
        statusMessage.setText("");
        DefaultTableModel model = new DefaultTableModel(new Object[]{"ID","NOME","CURSO","TURMA","NECESSIDADE"},0);
        
        
        try{
            int idAluno = Integer.parseInt(pesquisa_idAluno.getText());
            Aluno aluno = new AlunoDAO().buscarPorID(idAluno);
            
            
            if(aluno.getNome().isEmpty()){
                statusMessage.setText("Nenhum registro encontrado!");
            }
            
            String nomeAluno = aluno.getNome();
            String curso = aluno.getCurso();
            String necessidade = aluno.getNecessidade();
            int turma = aluno.getCodigoTurma();
            
            
            model.addRow(new Object[]{idAluno,nomeAluno,curso,turma,necessidade});
            
            if(model.getRowCount() == 0){
                statusMessage.setText("Nenhum registro encontrado!");
                return;
            }
            
            tabela_alunos.setModel(model);
            
            
        }catch(Exception e){
            statusMessage.setText("Algo deu errado, verifique as informações e tente novamente");
        }
    }
    
    private void setListaAlunosPorTurma(){
        //retorna os alunos de acordo com APENAS sua turma
        
        statusMessage.setText("");
        System.out.println("SLAPT");
        int idTurma = Integer.parseInt(pesquisa_id.getText());
        DefaultTableModel model = new DefaultTableModel(new Object[]{"ID","NOME","CURSO","TURMA","NECESSIDADE"},0);
        
        try {
            ArrayList<Aluno> alunos = new AlunoDAO().listarPorTurma(idTurma);
            
            for(int i=0;i<alunos.toArray().length;i++){
                String nomeAluno = alunos.get(i).getNome();
                int turmaAluno = alunos.get(i).getCodigoTurma();
                String cursoAluno = alunos.get(i).getCurso();
                String necessidadeAluno = alunos.get(i).getNecessidade();
                int idAluno = alunos.get(i).getAlunoID();
                
                model.addRow(new Object[]{idAluno,nomeAluno,cursoAluno,turmaAluno,necessidadeAluno});
                
                
            }
            
            if(model.getRowCount() == 0){
                statusMessage.setText("Nenhum registro encontrado!");
                return;
            }
            tabela_alunos.setModel(model);
            statusMessage.setText("");
        } catch (Exception ex) {
            statusMessage.setText("Algo deu errado");
        }
    }
    private void setListaAlunosPorTurmaeNome() throws Exception{
            //retorna a lista de alunos de acordo com a sua TURMA e o seu NOME
        
            statusMessage.setText("");
            System.out.println("SLAPTEN");
            DefaultTableModel model = new DefaultTableModel(new Object[]{"ID","NOME","CURSO","TURMA","NECESSIDADE"},0);
            
            try{
                String pesquisa = input_pesquisa.getText();
                int turma = Integer.parseInt(pesquisa_id.getText());
                ArrayList<Aluno> alunos = new AlunoDAO().listarPorTurmaeNome(turma,pesquisa);
                
                for(int i = 0; i < alunos.toArray().length;i++){
                String nomeAluno = alunos.get(i).getNome();
                int turmaAluno = alunos.get(i).getCodigoTurma();
                String cursoAluno = alunos.get(i).getCurso();
                String necessidadeAluno = alunos.get(i).getNecessidade();
                int idAluno = alunos.get(i).getAlunoID();
               
                model.addRow(new Object[]{idAluno,nomeAluno,cursoAluno,turmaAluno,necessidadeAluno});
                
                
            }
            if(model.getRowCount() == 0){
                statusMessage.setText("Nenhum registro encontrado!");
                return;
            }
            tabela_alunos.setModel(model);
            statusMessage.setText("");
            }catch(Exception e){
                statusMessage.setText("Algo deu errado");
            }
    }
    private void setListaAlunosPorNome() throws Exception{
            //retorna a lista de alunos de acordo apenas com SEU NOME
            
            statusMessage.setText("");
            System.out.println("SLAPN");
            
            //seto o nome das colunas a partir do método construtor (o primeiro parametro é o nome das colunas, o segundo é com quantas linhas a tabela vai iniciar)
            DefaultTableModel model = new DefaultTableModel(new Object[]{"ID","NOME","CURSO","TURMA","NECESSIDADE"},0);
        try{
            String pesquisa = input_pesquisa.getText();
            ArrayList<Aluno> alunos = new AlunoDAO().listarPorNome(pesquisa);
            
            
            for(int i = 0; i < alunos.toArray().length;i++){
                String nomeAluno = alunos.get(i).getNome();
                int turmaAluno = alunos.get(i).getCodigoTurma();
                String cursoAluno = alunos.get(i).getCurso();
                
                String necessidadeAluno = alunos.get(i).getNecessidade();
                int idAluno = alunos.get(i).getAlunoID();
                
                //adiciono as linhas com os valores respectivos das colunas q foram nomeadas
                model.addRow(new Object[]{idAluno,nomeAluno,cursoAluno,turmaAluno,necessidadeAluno});
                tabela_alunos.setModel(model);
               
            }
            
           if(model.getRowCount() == 0){
               statusMessage.setText("Nenhum registro encontrado!");
               return;
           }
            tabela_alunos.setModel(model);
            statusMessage.setText("");
            
        }catch(Exception e){
            statusMessage.setText("Algo deu errado");
        }
       
    }
    private void setListaAluno() throws Exception{
        //retorna a lista de alunos globais
        
        statusMessage.setText("");
        System.out.println("SLA");
        try{
        DefaultTableModel model = new DefaultTableModel(new Object[]{"ID","NOME","CURSO","TURMA","NECESSIDADE"},0);
        //para adicionar um elemento a lista..
        ArrayList<Aluno> alunosCadastrados = new AlunoDAO().listar();
        System.out.println("método ativado");
        System.out.println("qt alunos cadastrados:" + alunosCadastrados.toArray().length);
        for(int i = 0 ; i < alunosCadastrados.toArray().length ; i++)
        {
            String nomeAluno = alunosCadastrados.get(i).getNome();
            int turmaAluno = alunosCadastrados.get(i).getCodigoTurma();
            String cursoAluno = alunosCadastrados.get(i).getCurso();
            String necessidadeAluno = alunosCadastrados.get(i).getNecessidade();
            int alunoID = alunosCadastrados.get(i).getAlunoID();
            
            model.addRow(new Object[]{alunoID,nomeAluno,cursoAluno,turmaAluno,necessidadeAluno});
            
            
            
        }
        if(alunosCadastrados.isEmpty()){
            statusMessage.setText("Ainda não há alunos cadastrados!");
        }
        tabela_alunos.setModel(model);
        }catch(Exception e){
            statusMessage.setText("Erro ao carregar a lista de alunos");
            System.out.println(e.toString());
        }
           
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OListaAlunosDocente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OListaAlunosDocente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OListaAlunosDocente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OListaAlunosDocente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OListaAlunosDocente().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoAlternar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnPesquisar_alunoId;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JButton btn_addObs;
    private javax.swing.JButton btn_seeObs;
    private javax.swing.JTextField input_pesquisa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane6;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private javax.swing.JPanel panel_listaAlunos;
    private javax.swing.JTextField pesquisa_id;
    private javax.swing.JTextField pesquisa_idAluno;
    private javax.swing.JLabel statusMessage;
    private javax.swing.JTable tabela_alunos;
    // End of variables declaration//GEN-END:variables
}
